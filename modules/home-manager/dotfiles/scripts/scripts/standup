#!/usr/bin/env bash

# --- ANSI Color and formatting definitions ---
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
RESET='\033[0m'

# --- Box settings ---
BOX_WIDTH=30
BOX_BORDER="+$(printf '%0.s-' {1..30})+"

# --- Input validation ---
if [ "$#" -lt 2 ]; then
	echo -e "${RED}Usage: $0 TOTAL_MINUTES participant1 participant2 ...${RESET}"
	exit 1
fi

# Convert total meeting time (minutes) to seconds.
total_minutes="$1"
if ! [[ $total_minutes =~ ^[0-9]+$ ]] || [ "$total_minutes" -le 0 ]; then
	echo -e "${RED}Error: TOTAL_MINUTES must be a positive integer.${RESET}"
	exit 1
fi
total_time=$((total_minutes * 60))
shift
participants=("$@")
num_participants=${#participants[@]}

# Initialize overall meeting time remaining.
meeting_remaining=$total_time

# Calculate and store each participant's original allocated time.
declare -A original_allocations
for person in "${participants[@]}"; do
	original_allocations["$person"]=$((total_time / num_participants))
done

# --- Helper function: format seconds as MM:SS ---
format_time() {
	local secs=$1
	printf "%02d:%02d" $((secs / 60)) $((secs % 60))
}

# --- Function to print the meeting header ---
print_header() {
	clear
	echo -e "${BOLD}${BLUE}Stand-Up Meeting Timer${RESET}"
	echo -e "${CYAN}Meeting time remaining:${RESET} $(format_time "$meeting_remaining")"
	echo -e "${CYAN}Participants:${RESET} ${participants[*]}"
	echo -e "----------------------------------------"
}

# --- Main loop: iterate over participants ---
current_index=1
for person in "${participants[@]}"; do
	# Retrieve the original allocated time for this participant.
	allocated_time=${original_allocations["$person"]}

	# Clear the terminal and print header and current participant info.
	print_header
	echo -e "${BOLD}${CYAN}Current Participant (${current_index}/${num_participants}): ${person}${RESET}"
	echo -e "Allocated time: $(format_time "$allocated_time")"
	# echo -e "Press ENTER at any time to advance early."
	echo ""

	# Print initial countdown box in green.
	echo -e "${GREEN}${BOX_BORDER}${RESET}"
	printf "${GREEN}| %-${BOX_WIDTH}s |${RESET}\n" "YOUR TIME LEFT: $(format_time "$allocated_time")"
	echo -e "${GREEN}${BOX_BORDER}${RESET}"

	# Record start time.
	start_time=$(date +%s)
	elapsed=0

	# Countdown loop.
	while true; do
		elapsed=$(($(date +%s) - start_time))
		if [ $elapsed -le $allocated_time ]; then
			personal_remaining=$((allocated_time - elapsed))
			display_str="YOUR TIME LEFT: $(format_time "$personal_remaining")"
			box_color="$GREEN"
		else
			overrun=$((elapsed - allocated_time))
			display_str="OVERRUN: -$(format_time "$overrun")"
			box_color="$RED"
		fi

		# Prepare fixed-width line.
		printf -v display_line "%-${BOX_WIDTH}s" "$display_str"
		# Move cursor up 3 lines to update the box.
		printf "\033[3A"
		printf "${box_color}${BOX_BORDER}${RESET}\n"
		printf "${box_color}| %-${BOX_WIDTH}s |${RESET}\n" "$display_line"
		printf "${box_color}${BOX_BORDER}${RESET}\n"

		# Wait up to one second for key press; if pressed, break early.
		if read -t 1 -n 1 key; then
			break
		fi
	done

	# Determine used time.
	used_time=$elapsed

	# Update meeting remaining.
	# If the speaker finished before their allocated time, they "use" the full allocated slot;
	# otherwise, the actual elapsed time (including overrun) is subtracted.
	if [ $elapsed -lt $allocated_time ]; then
		echo -e "${BLUE}${person} finished early. Charging full allocated time of $(format_time "$allocated_time").${RESET}"
		used_time=$allocated_time
	fi
	meeting_remaining=$((meeting_remaining - used_time))

	# Pause briefly so the participant sees their results before moving on.
	sleep 1
	current_index=$((current_index + 1))
done

# Clear screen and print final message.
clear
echo -e "${BOLD}${BLUE}All participants have spoken. Meeting complete.${RESET}"
exit 0
